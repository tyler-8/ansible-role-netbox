---
- name: Create NetBox application directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
  loop:
    - "{{ netbox_home }}"
    - "{{ netbox_releases_path }}"
    - "{{ netbox_shared_path }}"
    - "{{ _netbox_config.MEDIA_ROOT }}"
    - "{{ _netbox_config.MEDIA_ROOT }}/image-attachments"
    - "{{ _netbox_config.REPORTS_ROOT }}"
    - "{{ _netbox_config.SCRIPTS_ROOT }}"

- include_tasks: "install_via_{{ 'git' if netbox_git else 'stable' }}.yml"

- import_tasks: generate_secret_key.yml
  when:
    - _netbox_config.SECRET_KEY is not defined

- name: Create NetBox virtualenv
  pip:
    name:
      - pip
      - setuptools
    state: latest
    virtualenv: "{{ netbox_virtualenv_path }}"
    virtualenv_command: "{{ netbox_python_binary }} -m venv"
  become: true
  become_user: "{{ netbox_user }}"
  retries: 2
  register: _netbox_virtualenv_setup
  until: _netbox_virtualenv_setup is succeeded

- name: Create constraints files
  ansible.builtin.template:
    src: pip_constraints.j2
    dest: "{{ netbox_shared_path }}/constraints.txt"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"

- name: Copy requirements.txt from netbox current path to shared path
  ansible.builtin.copy:
    src: "{{ netbox_current_path }}/requirements.txt"
    dest: "{{ netbox_shared_path }}/requirements.txt"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
    remote_src: true
  changed_when: false

- name: Override exact version requirements in shared path's requirements.txt if conflicting constraint is specified
  ansible.builtin.replace:
    path: "{{ netbox_shared_path }}/requirements.txt"
    regexp: '^({{ item | regex_replace("(==.*)", "") }})==.*'
    replace: '\1'
  loop: "{{ netbox_pip_constraints }}"
  changed_when: false
  when: "'==' in item"

- name: Install needed Python dependencies
  ansible.builtin.pip:
    requirements: "{{ netbox_shared_path }}/requirements.txt"
    extra_args: "{{ (['-c {{ netbox_shared_path }}/constraints.txt'] + (['--no-cache-dir'] if netbox_skip_pip_cache else [])) | join(' ') }}"
    virtualenv: "{{ netbox_virtualenv_path }}"
  become: true
  become_user: "{{ netbox_user }}"
  retries: 2
  register: _netbox_virtualenv_setup
  until: _netbox_virtualenv_setup is succeeded

- name: Install selected optional Python dependencies
  ansible.builtin.pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ netbox_virtualenv_path }}"
    extra_args: "{{ '--no-cache-dir' if netbox_skip_pip_cache else omit }}"
  become: true
  become_user: "{{ netbox_user }}"
  retries: 2
  register: _netbox_pip_additional_install
  until: _netbox_pip_additional_install is succeeded
  when: (_netbox_python_deps | length) > 0
  loop: "{{ _netbox_python_deps }}"
  notify:
    - restart netbox.service
    - restart netbox-rqworker.service

# local_requirements.txt
- name: Copy selected optional Python dependencies to local_requirements.txt
  ansible.builtin.copy:
    content: |
      {% for dep in _netbox_python_deps %}
      {{ dep }}
      {% endfor %}
    dest: "{{ netbox_current_path }}/local_requirements.txt"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
  when: (_netbox_python_deps | length) > 0

- name: NetBox Configuration
  block:
    # configuration.py
    - name: Generate NetBox configuration file
      ansible.builtin.template:
        src: templates/configuration.py.j2
        dest: "{{ netbox_shared_path }}/configuration.py"
        owner: "{{ netbox_user }}"
        group: "{{ netbox_group }}"
        mode: 0640
        validate: "{{ netbox_virtualenv_path }}/bin/python -c \"import py_compile,os; f=r'%s';\
                   c='/tmp/' + os.path.basename(os.path.dirname(f)) + '-' + os.path.basename(f) + 'c';\
                   py_compile.compile(f, c); os.remove(c)\""
      notify:
        - restart netbox-rqworker.service

    - name: Symlink NetBox configuration file into the active NetBox release
      ansible.builtin.file:
        src: "{{ netbox_shared_path }}/configuration.py"
        dest: "{{ netbox_config_path }}/configuration.py"
        owner: "{{ netbox_user }}"
        group: "{{ netbox_group }}"
        state: link

    # ldap_config.py
    - name: Generate LDAP configuration for NetBox if enabled
      ansible.builtin.template:
        src: "{{ netbox_ldap_config_template }}"
        dest: "{{ netbox_shared_path }}/ldap_config.py"
        owner: "{{ netbox_user }}"
        group: "{{ netbox_group }}"
        mode: 0640
        validate: "{{ netbox_virtualenv_path }}/bin/python -c \"import py_compile,os; f=r'%s';\
                    c='/tmp/' + os.path.basename(os.path.dirname(f)) + '-' + os.path.basename(f) + 'c';\
                    py_compile.compile(f, c); os.remove(c)\""
      when:
        - netbox_ldap_enabled

    - name: Symlink/Remove NetBox LDAP configuration file into/from the active NetBox release
      ansible.builtin.file:
        # Omitting the src attribute is necessary when state: absent
        src: "{{ netbox_shared_path + '/ldap_config.py' if netbox_ldap_enabled else omit }}"
        dest: "{{ netbox_config_path }}/ldap_config.py"
        owner: "{{ netbox_user }}"
        group: "{{ netbox_group }}"
        mode: 0640
        state: "{{ 'link' if netbox_ldap_enabled else 'absent' }}"

    # local_settings.py
    - name: Copy NetBox local_settings.py into shared (ignore if it doesn't exist)
      ansible.builtin.copy:
        src: "{{ netbox_local_settings_file }}"
        dest: "{{ netbox_shared_path }}/local_settings.py"
        owner: "{{ netbox_user }}"
        group: "{{ netbox_group }}"
        mode: 0640
      when:
        - netbox_local_settings_file is defined

    - name: Symlink/Remove NetBox local_settings.py file into/from the active NetBox release
      ansible.builtin.file:
        # Omitting the src attribute is necessary when state: absent
        src: "{{ netbox_shared_path + '/local_settings.py' if netbox_local_settings_file is defined else omit }}"
        dest: "{{ netbox_config_path }}/local_settings.py"
        owner: "{{ netbox_user }}"
        group: "{{ netbox_group }}"
        mode: 0640
        state: "{{ 'link' if netbox_local_settings_file is defined else 'absent' }}"
  notify:
    - reload netbox.service

- name: Copy NetBox scripts into SCRIPTS_ROOT
  copy:
    src: "{{ item.src }}"
    dest: "{{ _netbox_config.SCRIPTS_ROOT }}/{{ item.name }}.py"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
  loop: "{{ netbox_scripts }}"

- name: Copy NetBox reports into REPORTS_ROOT
  copy:
    src: "{{ item.src }}"
    dest: "{{ _netbox_config.REPORTS_ROOT }}/{{ item.name }}.py"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
  loop: "{{ netbox_reports }}"

- name: Schedule daily housekeeping cronjob
  cron:
    name: "Netbox housekeeping"
    special_time: daily
    job: "{{ netbox_virtualenv_path }}/bin/python {{ netbox_current_path }}/netbox/manage.py housekeeping"
    user: "{{ netbox_user }}"
    cron_file: "netbox"
  when:
    - netbox_stable and netbox_stable_version is version('3.0.0', '>=')
      or netbox_git and _netbox_git_contains_housekeeping.rc == 0

- block:
    - name: Run database migrations for NetBox
      django_manage:
        command: migrate
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"
      retries: 2
      register: _netbox_db_migration
      until: _netbox_db_migration is success

    - name: Trace missing cable paths for NetBox
      django_manage:
        command: "trace_paths --no-input"
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"
      when:
        - netbox_stable and netbox_stable_version is version('2.10.0', '>=')
          or netbox_git and _netbox_git_contains_trace_paths.rc == 0

    - name: Build the local documentation
      shell:
        cmd: "{{ netbox_virtualenv_path }}/bin/mkdocs build"
        chdir: "{{ netbox_current_path }}"
      when:
        - netbox_stable and netbox_stable_version is version('3.0.0', '>=')
          or netbox_git and _netbox_git_contains_mkdocs.rc == 0

    - name: Create a super user for NetBox
      shell: "printf '{{ netbox_superuser_script }}' |\
              {{ netbox_virtualenv_path }}/bin/python {{ netbox_current_path }}/netbox/manage.py shell"
      register: _netbox_superuser_result
      changed_when: "'changed' in _netbox_superuser_result.stdout"
      when:
        - netbox_superuser_enabled

    - name: Create a super user token for NetBox
      shell: "printf '{{ netbox_superuser_token }}' |\
              {{ netbox_virtualenv_path }}/bin/python {{ netbox_current_path }}/netbox/manage.py shell"
      register: _netbox_superuser_token
      changed_when: "'changed' in _netbox_superuser_token.stdout"
      when:
        - netbox_superuser_create_token
        - netbox_superuser_enabled

    - name: Generate static assets for NetBox
      django_manage:
        command: collectstatic
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"

    - name: Clear expired user sessions in NetBox
      django_manage:
        command: clearsessions
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"

    - name: Clear stale content types in NetBox
      django_manage:
        command: "remove_stale_contenttypes --no-input"
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"

    - name: Clear cached data in NetBox < 3
      django_manage:
        command: "invalidate all"
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"
      when:
        - netbox_stable and netbox_stable_version is version('3.0.0', '<')
          or netbox_git and _netbox_git_contains_invalidate_removed.rc != 0

    - name: Clear cached data in NetBox 3.2.3 to 3.6
      django_manage:
        command: "clearcache"
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"
      when:
        - netbox_stable and netbox_stable_version is version('3.2.2', '>')
          and netbox_stable_version is version('3.7.0', '<')
          or netbox_git and ( _netbox_git_contains_add_clearcache.rc == 0
            and _netbox_git_contains_remove_clearcache.rc != 0 )

    - name: Rebuild the search cache (lazily)
      django_manage:
        command: "reindex --lazy"
        app_path: "{{ netbox_current_path }}/netbox"
        virtualenv: "{{ netbox_virtualenv_path }}"
      when:
        - netbox_stable and netbox_stable_version is version('3.4.4', '>')
          or netbox_git and _netbox_git_contains_reindex_lazy.rc == 0

  become: true
  become_user: "{{ netbox_user }}"
